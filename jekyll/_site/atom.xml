<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-03T15:14:25-05:00</updated><id>http://localhost:4000/</id><title type="html">Julian’s Notes</title><author><name>Julian Nadeau</name></author><entry><title type="html">Developer Productivity</title><link href="http://localhost:4000/computers/dev_productivity/2018/01/03/dev_productivity/" rel="alternate" type="text/html" title="Developer Productivity" /><published>2018-01-03T12:13:05-05:00</published><updated>2018-01-03T12:13:05-05:00</updated><id>http://localhost:4000/computers/dev_productivity/2018/01/03/dev_productivity</id><content type="html" xml:base="http://localhost:4000/computers/dev_productivity/2018/01/03/dev_productivity/">&lt;p&gt;Developer Productivity can be described as a concept, set of tools or processes, or a team that is dedicated to enhancing the efficiency of other developers.&lt;/p&gt;

&lt;p&gt;This concept is spread throughout different companies, mostly with a focus on a few key areas. Unfortunately, the developers at different companies don’t seem to discuss, have meet-ups, or work together on their allied goals.&lt;/p&gt;

&lt;p&gt;Developer productivity is not a business concern nor is most of the work confidential. The work is generally generic and the concepts are easily shared and discussed. Over the course of many meetings with similar teams at other companies, it became obvious that we’re all duplicating each others’ work and more drastically, duplicating the exploration.&lt;/p&gt;

&lt;h2 id=&quot;phase-i&quot;&gt;Phase I&lt;/h2&gt;

&lt;p&gt;Phase I is simply the initial foundation of the community. The Slack channel, invitations at https://chat.devproductivity.io, is a good first step towards an initial foundation.&lt;/p&gt;

&lt;p&gt;As we grow the audience, we can start to hold online meet-ups. The first one is currently scheduled for sometime in January 2018.&lt;/p&gt;

&lt;p&gt;These simple ideas will allow us to start to grow a community and provide the foundations to introduce work on additional phases of the project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Success Criteria:&lt;/strong&gt; The community starts to grow and people remain excited. There is a decent turnout for the online meet-ups and people are asking what comes next.&lt;/p&gt;

&lt;h2 id=&quot;phase-ii&quot;&gt;Phase II&lt;/h2&gt;

&lt;p&gt;There is no current ground work laid to bootstrap a community dedicated to developer productivity. This means that we have the opportunity to create this community and share the work we do with each other.&lt;/p&gt;

&lt;p&gt;https://devproductivity.io will be a central hub managed by the community. With links to content about continuous integration and testing, automation, operational excellence, developer environments, mobile tooling, and other aspects of developer productivity - this website will be a central location on which to grow a solid foundation.&lt;/p&gt;

&lt;p&gt;This website/community allows us to draw talent and work from the larger pool of engineers working on the same goals, it also allows us to share our ideas, and educate the larger developer community about standard goals.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Success Criteria:&lt;/strong&gt; The community gets excited about the website and we start to see traffic pick up. The community will start to become more involved and take ownership of parts of the content once the initial site is launched.&lt;/p&gt;

&lt;h2 id=&quot;phase-iii&quot;&gt;Phase III&lt;/h2&gt;

&lt;p&gt;As we grow, online meet-ups will likely not scale. The website will need more community to continue to scale and continue to be a place that people frequent.&lt;/p&gt;

&lt;p&gt;In Phase III, we hold our first conference. Development has had conferences of so many varieties, but there has never been a conference dedicated to the concepts that form developer productivity.&lt;/p&gt;

&lt;p&gt;By holding the conference, we aim to become a driving force behind Developer Productivity and increase community knowledge and commitment to this community.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Success Criteria:&lt;/strong&gt; We see excitement and participation. The website and the content continues to increase in traffic and a vibrant community is formed.&lt;/p&gt;

&lt;h2 id=&quot;phase-n&quot;&gt;Phase N&lt;/h2&gt;

&lt;p&gt;We may not need to go much further than a conference. If these phases are successful, we may have found a recipe to continue to grow and continue to be a power house in the developer productivity community.&lt;/p&gt;</content><author><name>Julian Nadeau</name></author><category term="computers" /><category term="dev_productivity" /><summary type="html">Developer Productivity can be described as a concept, set of tools or processes, or a team that is dedicated to enhancing the efficiency of other developers. This concept is spread throughout different companies, mostly with a focus on a few key areas. Unfortunately, the developers at different companies don’t seem to discuss, have meet-ups, or work together on their allied goals. Developer productivity is not a business concern nor is most of the work confidential. The work is generally generic and the concepts are easily shared and discussed. Over the course of many meetings with similar teams at other companies, it became obvious that we’re all duplicating each others’ work and more drastically, duplicating the exploration. Phase I Phase I is simply the initial foundation of the community. The Slack channel, invitations at https://chat.devproductivity.io, is a good first step towards an initial foundation. As we grow the audience, we can start to hold online meet-ups. The first one is currently scheduled for sometime in January 2018. These simple ideas will allow us to start to grow a community and provide the foundations to introduce work on additional phases of the project. Success Criteria: The community starts to grow and people remain excited. There is a decent turnout for the online meet-ups and people are asking what comes next. Phase II There is no current ground work laid to bootstrap a community dedicated to developer productivity. This means that we have the opportunity to create this community and share the work we do with each other. https://devproductivity.io will be a central hub managed by the community. With links to content about continuous integration and testing, automation, operational excellence, developer environments, mobile tooling, and other aspects of developer productivity - this website will be a central location on which to grow a solid foundation. This website/community allows us to draw talent and work from the larger pool of engineers working on the same goals, it also allows us to share our ideas, and educate the larger developer community about standard goals. Success Criteria: The community gets excited about the website and we start to see traffic pick up. The community will start to become more involved and take ownership of parts of the content once the initial site is launched. Phase III As we grow, online meet-ups will likely not scale. The website will need more community to continue to scale and continue to be a place that people frequent. In Phase III, we hold our first conference. Development has had conferences of so many varieties, but there has never been a conference dedicated to the concepts that form developer productivity. By holding the conference, we aim to become a driving force behind Developer Productivity and increase community knowledge and commitment to this community. Success Criteria: We see excitement and participation. The website and the content continues to increase in traffic and a vibrant community is formed. Phase N We may not need to go much further than a conference. If these phases are successful, we may have found a recipe to continue to grow and continue to be a power house in the developer productivity community.</summary></entry><entry><title type="html">Experimental Rewrite</title><link href="http://localhost:4000/computers/ruby/bundler/experiment/2017/04/05/experimental_rewrite/" rel="alternate" type="text/html" title="Experimental Rewrite" /><published>2017-04-05T19:24:08-04:00</published><updated>2017-04-05T19:24:08-04:00</updated><id>http://localhost:4000/computers/ruby/bundler/experiment/2017/04/05/experimental_rewrite</id><content type="html" xml:base="http://localhost:4000/computers/ruby/bundler/experiment/2017/04/05/experimental_rewrite/">&lt;p&gt;MVP includes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gem support&lt;/li&gt;
  &lt;li&gt;source support&lt;/li&gt;
  &lt;li&gt;group support&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bundle-install&quot;&gt;bundle install&lt;/h2&gt;

&lt;!---
```diagram
graph TD
 bundle_install[bundle install]-\-&gt;compare[Gemfile == Gemfile.lock]
 compare--yes-\-&gt;makesure[are all gems in lockfile installed?]
 makesure--yes-\-&gt;done
 makesure--no-\-&gt;install[install missing gems]
 install-\-&gt;makesure
 compare--no-\-&gt;resolve[resolve differences to Gemfile.lock]
 resolve-\-&gt;makesure
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/6b39bed85de3d3cb24187e43db6e5a90.png&quot; alt=&quot;diagram image&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is a very naive approach as it doesn’t really take into account resolving nested dependencies in gemspecs.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;lockfile&lt;/code&gt; is consisted of a very simple file in the following format for easy parsing:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;checksum 12345abcdef
gem_name gem_version
gem_name gem_version
gem_name gem_version
gem_name gem_version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Julian Nadeau</name></author><category term="computers" /><category term="ruby" /><category term="bundler" /><category term="experiment" /><summary type="html">MVP includes: gem support source support group support bundle install This is a very naive approach as it doesn’t really take into account resolving nested dependencies in gemspecs. The lockfile is consisted of a very simple file in the following format for easy parsing: checksum 12345abcdef gem_name gem_version gem_name gem_version gem_name gem_version gem_name gem_version</summary></entry><entry><title type="html">load_breakdown</title><link href="http://localhost:4000/computers/ruby/bundler/2017/04/05/load_breakdown/" rel="alternate" type="text/html" title="load_breakdown" /><published>2017-04-05T17:36:58-04:00</published><updated>2017-04-05T17:36:58-04:00</updated><id>http://localhost:4000/computers/ruby/bundler/2017/04/05/load_breakdown</id><content type="html" xml:base="http://localhost:4000/computers/ruby/bundler/2017/04/05/load_breakdown/">&lt;h2 id=&quot;load-breakdown&quot;&gt;Load Breakdown&lt;/h2&gt;

&lt;!---
```diagram
graph TD
  load.setup
  load.setup-\-&gt;load_method[load]
  load.setup--663ms-\-&gt;setup

  subgraph lib/bundler/runtime.rb
    requested_specs
  end
  setup--630ms-\-&gt;requested_specs

  subgraph lib/bundler/definition.rb
    requested_specs--368ms-\-&gt;specs_for
    specs_for--248ms-\-&gt;specs1[specs]
    specs_for--121ms-\-&gt;spec.for
  end

  subgraph lib/bundler/spec_set.rb
    specs1--168ms-\-&gt;materialize
    spec.for--106ms-\-&gt;spec.dependencies

  end

  subgraph stub_specification.rb
    spec.dependencies--104ms-\-&gt;dependencies
  end

  subgraph lib/bundler/lazy_specification.rb
    materialize--157ms-\-&gt;__materialize__
    __materialize__--137ms-\-&gt;specs2[specs]
    __materialize__--12ms-\-&gt;search
    specs2--34ms-\-&gt;RubyGemsSpecs[RubyGems Specs]
    specs2--91ms-\-&gt;GitSpecs[Git Specs]
  end

  subgraph RUBY/rubygems/specifications.rb
    RubyGemsSpecs-\-&gt;load
    load-\-&gt;eval[eval code, binding, file]
    dependencies--104ms-\-&gt;gem_dependencies[dependencies]
  end

  subgraph lib/bundler/source/path.rb
    GitSpecs--90ms-\-&gt;load_spec_files
    load_spec_files--18ms-\-&gt;glob[Dir.glob]
  end

  subgraph lib/bundler.rb
    load_spec_files--69ms-\-&gt;load_gemspec
    load_gemspec--67ms-\-&gt;load_gemspec_uncached
    load_gemspec_uncached--55ms-\-&gt;eval_gemspec
  end
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/644eeff0ba582535065a98cf941ae6bc.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content><author><name>Julian Nadeau</name></author><category term="computers" /><category term="ruby" /><category term="bundler" /><summary type="html">Load Breakdown</summary></entry><entry><title type="html">RubyGems</title><link href="http://localhost:4000/computers/ruby/bundler/2017/04/05/ruby_gems/" rel="alternate" type="text/html" title="RubyGems" /><published>2017-04-05T14:05:16-04:00</published><updated>2017-04-05T14:05:16-04:00</updated><id>http://localhost:4000/computers/ruby/bundler/2017/04/05/ruby_gems</id><content type="html" xml:base="http://localhost:4000/computers/ruby/bundler/2017/04/05/ruby_gems/">&lt;h2 id=&quot;specification&quot;&gt;Specification&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /opt/rubies/2.3.3/lib/ruby/site_ruby/2.3.0/rubygems/specification.rb method: load
   numberFormat  %.2f

   &quot;_spec = LOAD_CACHE[file] (run 296 times)&quot; :a1, 0.000, 0.728
   &quot;return _spec if _spec (run 295 times)&quot; :a1, 0.728, 1.456
   &quot;file = file.dup.untaint (run 295 times)&quot; :a1, 1.456, 2.183
   &quot;return unless File.file?(file) (run 295 times)&quot; :a1, 2.183, 2.911
   &quot;code = if defined? Encoding (run 295 times)&quot; :a1, 2.911, 3.639
   &quot;File.read file  :mode =&gt; 'r:UTF-8:-' (run 295 times)&quot; :a1, 3.639, 4.367
   &quot;code.untaint (run 295 times)&quot; :a1, 4.367, 5.095
   &quot;begin (run 295 times)&quot; :a1, 5.095, 5.823
   &quot;_spec = eval code  binding  file (run 295 times)&quot; :a1, 5.823, 97.089
   &quot;if Gem::Specification === _spec (run 295 times)&quot; :a1, 97.089, 97.817
   &quot;_spec.loaded_from = File.expand_path file.to_s (run 295 times)&quot; :a1, 97.817, 98.544
   &quot;LOAD_CACHE[file] = _spec (run 295 times)&quot; :a1, 98.544, 99.272
   &quot;return _spec&quot; :a1, 99.272, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/f50cd68abdc716c81b609381352d8c7e.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content><author><name>Julian Nadeau</name></author><category term="computers" /><category term="ruby" /><category term="bundler" /><summary type="html">Specification</summary></entry><entry><title type="html">load</title><link href="http://localhost:4000/computers/ruby/bundler/2017/04/03/load/" rel="alternate" type="text/html" title="load" /><published>2017-04-03T16:25:24-04:00</published><updated>2017-04-03T16:25:24-04:00</updated><id>http://localhost:4000/computers/ruby/bundler/2017/04/03/load</id><content type="html" xml:base="http://localhost:4000/computers/ruby/bundler/2017/04/03/load/">&lt;h2 id=&quot;initialize&quot;&gt;initialize&lt;/h2&gt;

&lt;p&gt;A quick look at &lt;code class=&quot;highlighter-rouge&quot;&gt;load.setup&lt;/code&gt; shows us that the &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt; method takes a small amount of time &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0016739999991841614s&lt;/code&gt;. This means the bulk of the time is spent in &lt;code class=&quot;highlighter-rouge&quot;&gt;setup&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;setup&quot;&gt;setup&lt;/h2&gt;

&lt;p&gt;This method took about &lt;code class=&quot;highlighter-rouge&quot;&gt;0.6628200000268407s&lt;/code&gt; to run.&lt;/p&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler/runtime.rb method: setup
   numberFormat  %.2f

   &quot;groups.map!(&amp;:to_sym)&quot; :a1, 0.000, 0.151
   &quot;clean_load_path&quot; :a1, 0.151, 0.302
   &quot;specs = groups.any? ? @definition.specs_for(groups) : requested_specs&quot; :a1, 0.302, 85.592
   &quot;SharedHelpers.set_bundle_environment&quot; :a1, 85.592, 85.743
   &quot;Bundler.rubygems.replace_entrypoints(specs)&quot; :a1, 85.743, 90.408
   &quot;load_paths = specs.map do |spec|&quot; :a1, 90.408, 90.559
   &quot;unless spec.loaded_from (run 375 times)&quot; :a1, 90.559, 90.710
   &quot;if (activated_spec = Bundler.rubygems.loaded_specs(spec.name)) &amp;&amp; activated_spec.version != spec.version (run 375 times)&quot; :a1, 90.710, 90.861
   &quot;Bundler.rubygems.mark_loaded(spec) (run 375 times)&quot; :a1, 90.861, 91.012
   &quot;spec.load_paths.reject {|path| $LOAD_PATH.include?(path) } (run 804 times)&quot; :a1, 91.012, 91.163
   &quot;if insert_index = Bundler.rubygems.load_path_insert_index&quot; :a1, 91.163, 91.314
   &quot;$LOAD_PATH.insert(insert_index  *load_paths)&quot; :a1, 91.314, 91.465
   &quot;setup_manpath&quot; :a1, 91.465, 93.292
   &quot;lock(:preserve_unknown_sections =&gt; true)&quot; :a1, 93.292, 99.849
   &quot;self&quot; :a1, 99.849, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/07e884f69afd901b12c0b51a28ef09f6.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;specs = groups.any? ? @definition.specs_for(groups) : requested_specs&lt;/code&gt; takes the most time (about 85% of the time).&lt;/p&gt;

&lt;p&gt;Let’s break that down a bit. I’ll just change the turnary to an if/else and see what that produces.&lt;/p&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler/runtime.rb method: setup
   numberFormat  %.2f

   &quot;groups.map!(&amp;:to_sym)&quot; :a1, 0.000, 0.145
   &quot;clean_load_path&quot; :a1, 0.145, 0.290
   &quot;specs = if groups.any?&quot; :a1, 0.290, 0.435
   &quot;requested_specs&quot; :a1, 0.435, 82.871
   &quot;SharedHelpers.set_bundle_environment&quot; :a1, 82.871, 83.016
   &quot;Bundler.rubygems.replace_entrypoints(specs)&quot; :a1, 83.016, 88.346
   &quot;load_paths = specs.map do |spec|&quot; :a1, 88.346, 88.491
   &quot;unless spec.loaded_from (run 375 times)&quot; :a1, 88.491, 88.636
   &quot;if (activated_spec = Bundler.rubygems.loaded_specs(spec.name)) &amp;&amp; activated_spec.version != spec.version (run 375 times)&quot; :a1, 88.636, 88.780
   &quot;Bundler.rubygems.mark_loaded(spec) (run 375 times)&quot; :a1, 88.780, 88.925
   &quot;spec.load_paths.reject {|path| $LOAD_PATH.include?(path) } (run 804 times)&quot; :a1, 88.925, 89.070
   &quot;if insert_index = Bundler.rubygems.load_path_insert_index&quot; :a1, 89.070, 89.215
   &quot;$LOAD_PATH.insert(insert_index  *load_paths)&quot; :a1, 89.215, 89.360
   &quot;setup_manpath&quot; :a1, 89.360, 91.577
   &quot;lock(:preserve_unknown_sections =&gt; true)&quot; :a1, 91.577, 99.855
   &quot;self&quot; :a1, 99.855, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/615f1c41da348502c193e68959692a37.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;@definition.specs_for(groups)&lt;/code&gt; is not even called. All the time is spent in &lt;code class=&quot;highlighter-rouge&quot;&gt;requested_specs&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;requested_specs&quot;&gt;requested_specs&lt;/h2&gt;

&lt;p&gt;It seems this delegates to &lt;code class=&quot;highlighter-rouge&quot;&gt;definition&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;definition&lt;/code&gt;, this is the result:&lt;/p&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler/definition.rb method: requested_specs
   numberFormat  %.2f

   &quot;end&quot; :a1, 0.000, 0.173
   &quot;groups = requested_groups&quot; :a1, 0.173, 0.345
   &quot;groups.map!(&amp;:to_sym)&quot; :a1, 0.345, 0.518
   &quot;specs_for(groups)&quot; :a1, 0.518, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/58d1e97c0e200461c936baaa53e3dafe.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s look at &lt;code class=&quot;highlighter-rouge&quot;&gt;specs_for&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;specs_for&quot;&gt;specs_for&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler/definition.rb method: specs_for
   numberFormat  %.2f

   &quot;deps = dependencies.select {|d| (d.groups &amp; groups).any? } (run 238 times)&quot; :a1, 0.000, 0.152
   &quot;deps.delete_if {|d| !d.should_include? } (run 238 times)&quot; :a1, 0.152, 0.305
   &quot;specs.for(expand_dependencies(deps))&quot; :a1, 0.305, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/787a9e70bd8caab794f9928d1c62ddd8.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;specs.for(expand_dependencies(deps))&lt;/code&gt; takes the most time, but is it the &lt;code class=&quot;highlighter-rouge&quot;&gt;specs.for&lt;/code&gt; part, or the &lt;code class=&quot;highlighter-rouge&quot;&gt;expand_dependencies&lt;/code&gt; part?&lt;/p&gt;

&lt;p&gt;It is the &lt;code class=&quot;highlighter-rouge&quot;&gt;specs.for&lt;/code&gt; part:&lt;/p&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler/definition.rb method: specs_for
   numberFormat  %.2f

   &quot;deps = dependencies.select {|d| (d.groups &amp; groups).any? } (run 238 times)&quot; :a1, 0.000, 0.167
   &quot;deps.delete_if {|d| !d.should_include? } (run 238 times)&quot; :a1, 0.167, 0.334
   &quot;d = expand_dependencies(deps)&quot; :a1, 0.334, 0.854
   &quot;specs.for(d)&quot; :a1, 0.854, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/25a37703789441a3502a3f0cac608356.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;specsfor&quot;&gt;specs.for&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /development/opensource/bundler/lib/bundler/spec_set.rb method: for
   numberFormat  %.2f

   &quot;handled = {} (run 4 times)&quot; :a1, 0.000, 0.923
   &quot;deps = dependencies.dup (run 4 times)&quot; :a1, 0.923, 1.847
   &quot;specs = [] (run 4 times)&quot; :a1, 1.847, 2.770
   &quot;skip += ['bundler'] (run 4 times)&quot; :a1, 2.770, 3.693
   &quot;loop do (run 4 times)&quot; :a1, 3.693, 4.617
   &quot;break unless dep = deps.shift (run 1834 times)&quot; :a1, 4.617, 5.540
   &quot;if spec = lookup['bundler'].first (run 4 times)&quot; :a1, 5.540, 6.463
   &quot;next if handled[dep] || skip.include?(dep.name) (run 1830 times)&quot; :a1, 6.463, 7.387
   &quot;handled[dep] = true (run 1821 times)&quot; :a1, 7.387, 8.310
   &quot;if spec = spec_for_dependency(dep  match_current_platform) (run 1821 times)&quot; :a1, 8.310, 9.234
   &quot;specs &lt;&lt; spec (run 1821 times)&quot; :a1, 9.234, 10.157
   &quot;spec.dependencies.each do |d| (run 1821 times)&quot; :a1, 10.157, 95.383
   &quot;next if d.type == :development (run 28 times)&quot; :a1, 95.383, 96.307
   &quot;d = DepProxy.new(d  dep.__platform) unless match_current_platform (run 27 times)&quot; :a1, 96.307, 97.230
   &quot;deps &lt;&lt; d (run 27 times)&quot; :a1, 97.230, 98.153
   &quot;specs &lt;&lt; spec&quot; :a1, 98.153, 99.077
   &quot;check ? true : SpecSet.new(specs)&quot; :a1, 99.077, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/2e6f41664c612288598541f69ed6d7ce.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;specs&quot;&gt;specs&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler/definition.rb method: specs_for
   numberFormat  %.2f

   &quot;deps = dependencies.select {|d| (d.groups &amp; groups).any? } (run 238 times)&quot; :a1, 0.000, 0.165
   &quot;deps.delete_if {|d| !d.should_include? } (run 238 times)&quot; :a1, 0.165, 0.330
   &quot;d = expand_dependencies(deps)&quot; :a1, 0.330, 0.836
   &quot;s = specs&quot; :a1, 0.836, 75.406
   &quot;s.for(d)&quot; :a1, 75.406, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/1e0e32865dd876d5e30abcfb8a5720e9.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, about 3/4 of the time is spent making the specs, and 1/4 of the time processing with &lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;specs-1&quot;&gt;specs&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler/definition.rb method: specs
   numberFormat  %.2f

   &quot;end&quot; :a1, 0.000, 0.223
   &quot;begin&quot; :a1, 0.223, 0.445
   &quot;specs = resolve.materialize(Bundler.settings[:cache_all_platforms] ? dependencies : requested_dependencies)&quot; :a1, 0.445, 92.952
   &quot;unless specs['bundler'].any?&quot; :a1, 92.952, 95.996
   &quot;local = Bundler.settings[:frozen] ? rubygems_index : index&quot; :a1, 95.996, 99.286
   &quot;bundler = local.search(Gem::Dependency.new('bundler'  VERSION)).last&quot; :a1, 99.286, 99.555
   &quot;specs['bundler'] = bundler if bundler&quot; :a1, 99.555, 99.777
   &quot;specs&quot; :a1, 99.777, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/d5e1e5092bb91951c29c59dc88ad2c72.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This line does quite a lot (&lt;code class=&quot;highlighter-rouge&quot;&gt;resolve.materialize(Bundler.settings[:cache_all_platforms] ? dependencies : requested_dependencies)&lt;/code&gt;), so let’s split it up.&lt;/p&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler/definition.rb method: specs
   numberFormat  %.2f

   &quot;end&quot; :a1, 0.000, 0.222
   &quot;begin&quot; :a1, 0.222, 0.444
   &quot;r = resolve&quot; :a1, 0.444, 37.415
   &quot;deps = if Bundler.settings[:cache_all_platforms]&quot; :a1, 37.415, 37.637
   &quot;requested_dependencies&quot; :a1, 37.637, 37.859
   &quot;specs = r.materialize(deps)&quot; :a1, 37.859, 93.610
   &quot;unless specs['bundler'].any?&quot; :a1, 93.610, 96.213
   &quot;local = Bundler.settings[:frozen] ? rubygems_index : index&quot; :a1, 96.213, 99.286
   &quot;bundler = local.search(Gem::Dependency.new('bundler'  VERSION)).last&quot; :a1, 99.286, 99.556
   &quot;specs['bundler'] = bundler if bundler&quot; :a1, 99.556, 99.778
   &quot;specs&quot; :a1, 99.778, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/a4abdd379f1207b63fab6d37ec66088a.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;materialize&lt;/code&gt; take the most time.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;materializing&quot;&gt;Materializing&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;line&lt;/th&gt;
      &lt;th&gt;num_calls&lt;/th&gt;
      &lt;th&gt;time (s)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;resolve&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;0.05524000007426366&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;materialize&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.1665900000371039&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;materialize&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;374&lt;/td&gt;
      &lt;td&gt;0.15040999941993505&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;specs&lt;/td&gt;
      &lt;td&gt;374&lt;/td&gt;
      &lt;td&gt;0.13627100008307025&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rubygems spec&lt;/td&gt;
      &lt;td&gt;296&lt;/td&gt;
      &lt;td&gt;0.03416500013554469&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;git specs&lt;/td&gt;
      &lt;td&gt;293&lt;/td&gt;
      &lt;td&gt;0.09133500000461936&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;search&lt;/td&gt;
      &lt;td&gt;596&lt;/td&gt;
      &lt;td&gt;0.012452999944798648&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;!---
```diagram
graph TD
  materialize -- 150ms -\-&gt; __materialize__
  __materialize__ -- 136ms -\-&gt; specs
  
  subgraph __materialize__
    specs -- 34ms -\-&gt; rubygems_specs[RubyGems specs]
    specs -- 91ms -\-&gt; git_specs[Git Specs]
    __materialize__ -- 12ms -\-&gt; search
  end
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/005fba5b5ad80e50382313df2a1f4aaf.png&quot; alt=&quot;diagram image&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;git-based-specs&quot;&gt;git-based specs&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler/source/path.rb method: load_spec_files
   numberFormat  %.2f

   &quot;index = Index.new (run 71 times)&quot; :a1, 0.000, 0.922
   &quot;if File.directory?(expanded_path) (run 71 times)&quot; :a1, 0.922, 8.775
   &quot;Dir['#{expanded_path}/#{@glob}'].sort_by {|p| -p.split(File::SEPARATOR).size }.each do |file| (run 153 times)&quot; :a1, 8.775, 23.952
   &quot;next unless spec = Bundler.load_gemspec(file) (run 82 times)&quot; :a1, 23.952, 94.468
   &quot;spec.source = self (run 82 times)&quot; :a1, 94.468, 95.390
   &quot;Bundler.rubygems.set_installed_by_version(spec) (run 82 times)&quot; :a1, 95.390, 96.312
   &quot;validate_spec(spec) (run 82 times)&quot; :a1, 96.312, 97.234
   &quot;index &lt;&lt; spec (run 82 times)&quot; :a1, 97.234, 98.156
   &quot;if index.empty? &amp;&amp; @name &amp;&amp; @version (run 71 times)&quot; :a1, 98.156, 99.078
   &quot;index&quot; :a1, 99.078, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/07b61084e06c0c400a0ba5b6a548fc23.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that we load 82 gemspecs - which takes the most time. Can we cache loading those gemspecs? They aren’t going to change in between loads.&lt;/p&gt;

&lt;p&gt;Globbing the filesystem also takes a chunk of time (&lt;code class=&quot;highlighter-rouge&quot;&gt;Dir['#{expanded_path}/#{@glob}'].sort_by {|p| -p.split(File::SEPARATOR).size }&lt;/code&gt;) - about 15% of 91ms to be exact.&lt;/p&gt;

&lt;h2 id=&quot;load_gemspec&quot;&gt;load_gemspec&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler.rb method: load_gemspec
   numberFormat  %.2f

   &quot;@gemspec_cache ||= {} (run 82 times)&quot; :a1, 0.000, 1.374
   &quot;key = File.expand_path(file) (run 82 times)&quot; :a1, 1.374, 2.748
   &quot;@gemspec_cache[key] ||= load_gemspec_uncached(file  validate) (run 82 times)&quot; :a1, 2.748, 98.626
   &quot;@gemspec_cache[key].dup if @gemspec_cache[key]&quot; :a1, 98.626, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/28b3399c87fa8b4a55749e53e1e3e3b4.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;load_gemspec_uncached&quot;&gt;load_gemspec_uncached&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /src/github.com/jules2689/bundler/lib/bundler.rb method: load_gemspec_uncached
   numberFormat  %.2f

   &quot;path = Pathname.new(file) (run 82 times)&quot; :a1, 0.000, 1.315
   &quot;SharedHelpers.chdir(path.dirname.to_s) do (run 82 times)&quot; :a1, 1.315, 2.631
   &quot;contents = path.read (run 82 times)&quot; :a1, 2.631, 3.946
   &quot;spec = if contents[0..2] == '---' # YAML header (run 82 times)&quot; :a1, 3.946, 5.262
   &quot;eval_gemspec(path  contents) (run 82 times)&quot; :a1, 5.262, 94.738
   &quot;return unless spec (run 82 times)&quot; :a1, 94.738, 96.054
   &quot;spec.loaded_from = path.expand_path.to_s (run 82 times)&quot; :a1, 96.054, 97.369
   &quot;Bundler.rubygems.validate(spec) if validate (run 82 times)&quot; :a1, 97.369, 98.685
   &quot;spec&quot; :a1, 98.685, 100.000
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/51fcc2cac0589579c867445fcd5b7dd8.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;</content><author><name>Julian Nadeau</name></author><category term="computers" /><category term="ruby" /><category term="bundler" /><summary type="html">initialize A quick look at load.setup shows us that the load method takes a small amount of time 0.0016739999991841614s. This means the bulk of the time is spent in setup. setup This method took about 0.6628200000268407s to run. As we can see, specs = groups.any? ? @definition.specs_for(groups) : requested_specs takes the most time (about 85% of the time). Let’s break that down a bit. I’ll just change the turnary to an if/else and see what that produces. As we can see, @definition.specs_for(groups) is not even called. All the time is spent in requested_specs. requested_specs It seems this delegates to definition. In definition, this is the result: Let’s look at specs_for specs_for specs.for(expand_dependencies(deps)) takes the most time, but is it the specs.for part, or the expand_dependencies part? It is the specs.for part: specs.for specs As we can see, about 3/4 of the time is spent making the specs, and 1/4 of the time processing with for. specs This line does quite a lot (resolve.materialize(Bundler.settings[:cache_all_platforms] ? dependencies : requested_dependencies)), so let’s split it up. As we can see, resolve and materialize take the most time. Materializing line num_calls time (s) resolve 73 0.05524000007426366 materialize 1 0.1665900000371039 materialize 374 0.15040999941993505 specs 374 0.13627100008307025 rubygems spec 296 0.03416500013554469 git specs 293 0.09133500000461936 search 596 0.012452999944798648 git-based specs We can see that we load 82 gemspecs - which takes the most time. Can we cache loading those gemspecs? They aren’t going to change in between loads. Globbing the filesystem also takes a chunk of time (Dir['#{expanded_path}/#{@glob}'].sort_by {|p| -p.split(File::SEPARATOR).size }) - about 15% of 91ms to be exact. load_gemspec load_gemspec_uncached</summary></entry><entry><title type="html">Moving Average Convergence Divergence - MACD</title><link href="http://localhost:4000/finance/2017/04/02/macd/" rel="alternate" type="text/html" title="Moving Average Convergence Divergence - MACD" /><published>2017-04-02T21:58:42-04:00</published><updated>2017-04-02T21:58:42-04:00</updated><id>http://localhost:4000/finance/2017/04/02/macd</id><content type="html" xml:base="http://localhost:4000/finance/2017/04/02/macd/">&lt;p&gt;It is a trend following momentum indicator showing the relationship between 2 moving averages.&lt;/p&gt;

&lt;p&gt;The MACD is calculated by:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;subtracting the 26-day exponential moving average (EMA) from the 12-day EMA.&lt;/li&gt;
  &lt;li&gt;A 9-day EMA of the MACD is plotted on top of this.&lt;/li&gt;
  &lt;li&gt;It is used as a signal line to indicate when to buy and sell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i.investopedia.com/inv/dictionary/terms/macd1.gif&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;interpretation&quot;&gt;Interpretation&lt;/h2&gt;

&lt;h3 id=&quot;crossovers&quot;&gt;Crossovers&lt;/h3&gt;

&lt;p&gt;When the MACD falls below the signal line, it is a “bearish” signal which indicates that it may be time to sell.&lt;/p&gt;

&lt;p&gt;Conversely, when it rises above the signal line, it may indicate an upward momentum.&lt;/p&gt;

&lt;h3 id=&quot;divergence&quot;&gt;Divergence&lt;/h3&gt;

&lt;p&gt;When the price diverges from the MACD, it means the end of the current trend.&lt;/p&gt;

&lt;h3 id=&quot;a-dramatic-rise&quot;&gt;A Dramatic Rise&lt;/h3&gt;

&lt;p&gt;When the shorter term (9 day EMA) pulls away from the longer term (26 day EMA) it means that the stock is overbought and will soon return to normal levels.&lt;/p&gt;

&lt;h3 id=&quot;other&quot;&gt;Other&lt;/h3&gt;

&lt;p&gt;When the line moves above or below the zero line, this is a signal the position of the short term average relative to the long term average.&lt;/p&gt;

&lt;p&gt;When it is above zero, the short term average is above the long term average. This indicates upward momentum. When it is below zero, it indicates downward momentum.&lt;/p&gt;</content><author><name>Julian Nadeau</name></author><category term="finance" /><summary type="html">It is a trend following momentum indicator showing the relationship between 2 moving averages. The MACD is calculated by: subtracting the 26-day exponential moving average (EMA) from the 12-day EMA. A 9-day EMA of the MACD is plotted on top of this. It is used as a signal line to indicate when to buy and sell. Interpretation Crossovers When the MACD falls below the signal line, it is a “bearish” signal which indicates that it may be time to sell. Conversely, when it rises above the signal line, it may indicate an upward momentum. Divergence When the price diverges from the MACD, it means the end of the current trend. A Dramatic Rise When the shorter term (9 day EMA) pulls away from the longer term (26 day EMA) it means that the stock is overbought and will soon return to normal levels. Other When the line moves above or below the zero line, this is a signal the position of the short term average relative to the long term average. When it is above zero, the short term average is above the long term average. This indicates upward momentum. When it is below zero, it indicates downward momentum.</summary></entry><entry><title type="html">Bollinger Band</title><link href="http://localhost:4000/finance/2017/04/02/bollinger_band/" rel="alternate" type="text/html" title="Bollinger Band" /><published>2017-04-02T21:35:34-04:00</published><updated>2017-04-02T21:35:34-04:00</updated><id>http://localhost:4000/finance/2017/04/02/bollinger_band</id><content type="html" xml:base="http://localhost:4000/finance/2017/04/02/bollinger_band/">&lt;p&gt;Developed by John Bollinger, the Bollinger Band shows the price of the stock with an upper and lower band (standard deviation) shown with a 21-day simple moving average.&lt;/p&gt;

&lt;p&gt;Standard Deviation is a model of volatility.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;larger volatility is presented with a larger band (more room for growth, but equally for loss)&lt;/li&gt;
  &lt;li&gt;smaller band means less volatile.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;oversold--overbought&quot;&gt;Oversold &amp;amp; Overbought&lt;/h2&gt;

&lt;p&gt;Some people believe that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;as the price of the stock moves to the upper band == Overbought&lt;/li&gt;
  &lt;li&gt;the more it moves to the lower band == Oversold&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-squeeze&quot;&gt;The Squeeze&lt;/h2&gt;

&lt;p&gt;When the bands contract, this is called a squeeze.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;period of lower volatility&lt;/li&gt;
  &lt;li&gt;many take as a signal for future increased volatility and trading&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the bands move further apart&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;larger risk for them to move apart again&lt;/li&gt;
  &lt;li&gt;may be a good time to exit a trade.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These conditions are not trading signals. They don’t indicate when the change will take place, or the direction they’ll move.&lt;/p&gt;

&lt;h2 id=&quot;the-math&quot;&gt;The math&lt;/h2&gt;

&lt;p&gt;Bollinger Bands consist of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;an N-period moving average (MA)&lt;/li&gt;
  &lt;li&gt;an upper band at K times an N-period standard deviation above the moving average (MA + Kσ)&lt;/li&gt;
  &lt;li&gt;a lower band at K times an N-period standard deviation below the moving average (MA − Kσ)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;N and K are usually 20 and 2.&lt;/p&gt;

&lt;p&gt;Other averages can be used, such as the exponential moving average.&lt;/p&gt;

&lt;h2 id=&quot;effectiveness&quot;&gt;Effectiveness&lt;/h2&gt;

&lt;p&gt;A 2007 study that spanned from 1995 to 2005 showed no evidence of consistent performance over the standard “buy and hold” approach, but a “contrarian Bollinger Band” (reversal of the strategy) yielded positive results.&lt;/p&gt;

&lt;p&gt;The band may be more effective in Chinese markets.&lt;/p&gt;</content><author><name>Julian Nadeau</name></author><category term="finance" /><summary type="html">Developed by John Bollinger, the Bollinger Band shows the price of the stock with an upper and lower band (standard deviation) shown with a 21-day simple moving average. Standard Deviation is a model of volatility. larger volatility is presented with a larger band (more room for growth, but equally for loss) smaller band means less volatile. Oversold &amp;amp; Overbought Some people believe that: as the price of the stock moves to the upper band == Overbought the more it moves to the lower band == Oversold The Squeeze When the bands contract, this is called a squeeze. period of lower volatility many take as a signal for future increased volatility and trading When the bands move further apart larger risk for them to move apart again may be a good time to exit a trade. These conditions are not trading signals. They don’t indicate when the change will take place, or the direction they’ll move. The math Bollinger Bands consist of: an N-period moving average (MA) an upper band at K times an N-period standard deviation above the moving average (MA + Kσ) a lower band at K times an N-period standard deviation below the moving average (MA − Kσ) N and K are usually 20 and 2. Other averages can be used, such as the exponential moving average. Effectiveness A 2007 study that spanned from 1995 to 2005 showed no evidence of consistent performance over the standard “buy and hold” approach, but a “contrarian Bollinger Band” (reversal of the strategy) yielded positive results. The band may be more effective in Chinese markets.</summary></entry><entry><title type="html">bundler/lockfile_parser.rb</title><link href="http://localhost:4000/computers/ruby/bundler/2017/03/27/lockfile_parser/" rel="alternate" type="text/html" title="bundler/lockfile_parser.rb" /><published>2017-03-27T16:50:50-04:00</published><updated>2017-03-27T16:50:50-04:00</updated><id>http://localhost:4000/computers/ruby/bundler/2017/03/27/lockfile_parser</id><content type="html" xml:base="http://localhost:4000/computers/ruby/bundler/2017/03/27/lockfile_parser/">&lt;!---
```diagram
gantt
   title file: /gems/bundler-1.14.6/lib/bundler/lockfile_parser.rb method: initialize
   dateFormat  s.SSS

   &quot;@platforms    = []&quot; :a1, 0.000, 0.001
   &quot;@sources      = []&quot; :a1, 0.001, 0.002
   &quot;@dependencies = []&quot; :a1, 0.002, 0.003
   &quot;@state        = nil&quot; :a1, 0.003, 0.004
   &quot;@specs        = {}&quot; :a1, 0.004, 0.005
   &quot;@rubygems_aggregate = Source::Rubygems.new&quot; :a1, 0.005, 0.006
   &quot;if lockfile.match(/&lt;&lt;&lt;&lt;&lt;&lt;&lt;|=======|&gt;&gt;&gt;&gt;&gt;&gt;&gt;|\|\|\|\|\|\|\|/)&quot; :a1, 0.006, 0.007
   &quot;lockfile.split(/(?:\r?\n)+/).each do |line|&quot; :a1, 0.007, 0.008
   &quot;if SOURCE.include?(line) (run 1445 times)&quot; :a1, 0.008, 0.010
   &quot;@state = :source (run 72 times)&quot; :a1, 0.010, 0.011
   &quot;parse_source(line) (run 72 times)&quot; :a1, 0.011, 0.012
   &quot;elsif line == DEPENDENCIES (run 1373 times)&quot; :a1, 0.012, 0.014
   &quot;elsif line == PLATFORMS (run 1372 times)&quot; :a1, 0.014, 0.016
   &quot;elsif line == RUBY (run 1371 times)&quot; :a1, 0.016, 0.018
   &quot;elsif line == BUNDLED (run 1371 times)&quot; :a1, 0.018, 0.020
   &quot;elsif line =~ /^[^\s]/ (run 1370 times)&quot; :a1, 0.020, 0.025
   &quot;elsif @state (run 1370 times)&quot; :a1, 0.025, 0.027
   &quot;send('parse_{@state}', line) (run 1370 times)&quot; :a1, 0.027, 0.077
   &quot;@state = :platform&quot; :a1, 0.077, 0.078
   &quot;@state = :dependency&quot; :a1, 0.078, 0.079
   &quot;@state = :bundled_with&quot; :a1, 0.079, 0.080
   &quot;@sources &lt;&lt; @rubygems_aggregate&quot; :a1, 0.080, 0.081
   &quot;@specs = @specs.values.sort_by(&amp;:identifier)&quot; :a1, 0.081, 0.090
   &quot;warn_for_outdated_bundler_version&quot; :a1, 0.090, 0.091
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/Screen Shot 2017-03-28 at 4.50.46 PM.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here, we see that &lt;code class=&quot;highlighter-rouge&quot;&gt;parse_#{@state}&lt;/code&gt; is the bulk of the work. This is a dynamic call to parse methods… is any one of them slower than another?&lt;/p&gt;

&lt;p&gt;To solve this, I split out the dynamic line into a case statement to see which lines were being called.&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;elseif @state
&lt;span class=&quot;gi&quot;&gt;+ case @state.to_s
+ when 'source'
+     parse_source(line)
+ when 'dependency'
+     parse_dependency(line)
+ when 'spec'
+     parse_spec(line)
+ when 'platform'
+     parse_platform(line)
+ when 'bundled_with'
+     parse_bundled_with(line)
+ when 'ruby'
+     parse_ruby(line)
+ else
+     send(&quot;parse_#{@state}&quot;, line)
+ end
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;- send(&quot;parse_#{@state}&quot;, line)   
&lt;/span&gt;end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By the diagram below, we can see the following from our case statement:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;parse_state&lt;/th&gt;
      &lt;th&gt;number&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;parse_source&lt;/td&gt;
      &lt;td&gt;1131 times&lt;/td&gt;
      &lt;td&gt;32ms&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SOURCE&lt;/code&gt; did not include line, so it went to the case statement&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parse_platform&lt;/td&gt;
      &lt;td&gt;1 time&lt;/td&gt;
      &lt;td&gt;1 ms&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parse_dependency&lt;/td&gt;
      &lt;td&gt;237 times&lt;/td&gt;
      &lt;td&gt;15 ms&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;parse_bundled_with&lt;/td&gt;
      &lt;td&gt;1 time&lt;/td&gt;
      &lt;td&gt;1 ms&lt;/td&gt;
      &lt;td&gt;-&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;!---
```diagram
gantt
   title file: /gems/bundler-1.14.6/lib/bundler/lockfile_parser.rb method: initialize
   dateFormat  s.SSS

   &quot;@platforms    = []&quot; :a1, 0.000, 0.001
   &quot;@sources      = []&quot; :a1, 0.001, 0.002
   &quot;@dependencies = []&quot; :a1, 0.002, 0.003
   &quot;@state        = nil&quot; :a1, 0.003, 0.004
   &quot;@specs        = {}&quot; :a1, 0.004, 0.005
   &quot;@rubygems_aggregate = Source::Rubygems.new&quot; :a1, 0.005, 0.006
   &quot;if lockfile.match(/&lt;&lt;&lt;&lt;&lt;&lt;&lt;|=======|&gt;&gt;&gt;&gt;&gt;&gt;&gt;|\|\|\|\|\|\|\|/)&quot; :a1, 0.006, 0.007
   &quot;lockfile.split(/(?:\r?\n)+/).each do |line|&quot; :a1, 0.007, 0.008
   &quot;if SOURCE.include?(line) (run 1445 times)&quot; :a1, 0.008, 0.012
   &quot;@state = :source (run 72 times)&quot; :a1, 0.012, 0.013
   &quot;parse_source(line) (run 72 times)&quot; :a1, 0.013, 0.014
   &quot;elsif line == DEPENDENCIES (run 1373 times)&quot; :a1, 0.014, 0.015
   &quot;elsif line == PLATFORMS (run 1372 times)&quot; :a1, 0.015, 0.017
   &quot;elsif line == RUBY (run 1371 times)&quot; :a1, 0.017, 0.019
   &quot;elsif line == BUNDLED (run 1371 times)&quot; :a1, 0.019, 0.021
   &quot;elsif line =~ /^[^\s]/ (run 1370 times)&quot; :a1, 0.021, 0.024
   &quot;elsif @state (run 1370 times)&quot; :a1, 0.024, 0.026
   &quot;case @state.to_s (run 1370 times)&quot; :a1, 0.026, 0.029
   &quot;parse_source(line) (run 1131 times)&quot; :a1, 0.029, 0.061
   &quot;@state = :platform&quot; :a1, 0.061, 0.062
   &quot;parse_platform(line)&quot; :a1, 0.062, 0.063
   &quot;@state = :dependency&quot; :a1, 0.063, 0.064
   &quot;parse_dependency(line) (run 237 times)&quot; :a1, 0.064, 0.079
   &quot;@state = :bundled_with&quot; :a1, 0.079, 0.080
   &quot;parse_bundled_with(line)&quot; :a1, 0.080, 0.081
   &quot;@sources &lt;&lt; @rubygems_aggregate&quot; :a1, 0.081, 0.082
   &quot;@specs = @specs.values.sort_by(&amp;:identifier)&quot; :a1, 0.082, 0.093
   &quot;warn_for_outdated_bundler_version&quot; :a1, 0.093, 0.094
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/Screen Shot 2017-03-28 at 4.46.45 PM.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;parse_source&quot;&gt;parse_source&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /gems/bundler-1.14.6/lib/bundler/lockfile_parser.rb method: parse_source
   dateFormat  s.SSS

   &quot;case line (run 1203 times)&quot; :a1, 0.000, 0.003
   &quot;@current_source = nil (run 72 times)&quot; :a1, 0.003, 0.004
   &quot;@opts = {} (run 72 times)&quot; :a1, 0.004, 0.005
   &quot;@type = line (run 72 times)&quot; :a1, 0.005, 0.006
   &quot;value = $2 (run 205 times)&quot; :a1, 0.006, 0.007
   &quot;value = true if value == 'true' (run 205 times)&quot; :a1, 0.007, 0.008
   &quot;value = false if value == 'false' (run 205 times)&quot; :a1, 0.008, 0.009
   &quot;key = $1 (run 205 times)&quot; :a1, 0.009, 0.010
   &quot;if @opts[key] (run 205 times)&quot; :a1, 0.010, 0.011
   &quot;@opts[key] = value (run 205 times)&quot; :a1, 0.011, 0.014
   &quot;case @type (run 72 times)&quot; :a1, 0.014, 0.015
   &quot;@current_source = TYPES[@type].from_lock(@opts) (run 71 times)&quot; :a1, 0.015, 0.016
   &quot;if @sources.include?(@current_source) (run 71 times)&quot; :a1, 0.016, 0.017
   &quot;@sources &lt;&lt; @current_source (run 71 times)&quot; :a1, 0.017, 0.018
   &quot;parse_spec(line) (run 854 times)&quot; :a1, 0.018, 0.057
   &quot;Array(@opts['remote']).each do |url|&quot; :a1, 0.057, 0.058
   &quot;@rubygems_aggregate.add_remote(url)&quot; :a1, 0.058, 0.059
   &quot;@current_source = @rubygems_aggregate&quot; :a1, 0.059, 0.060
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/Screen Shot 2017-03-28 at 4.47.00 PM.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parse_spec&lt;/code&gt; is the obvious bulk of this method, so let’s also look there.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;parse_spec&quot;&gt;parse_spec&lt;/h2&gt;

&lt;p&gt;The parse spec code looks like so:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NAME_VERSION_4&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RUBY&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@current_spec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;LazySpecification&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@current_spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@current_source&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Avoid introducing multiple copies of the same spec (caused by&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# duplicate GIT sections)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@specs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@current_spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;identifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@current_spec&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;elsif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NAME_VERSION_6&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@current_spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dep&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It takes about 15-17ms to run all of it. I’d like to see how often each part is called.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NAME_VERSION_4, called 374 times, took about 7ms&lt;/li&gt;
  &lt;li&gt;NAME_VERSION_6, called 480 times, took about 8ms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Which means they take equally as long, but the NAME_VERSION_4 option is slower taking about 0.000044s for each run as opposed to 0.000035s for each run.&lt;/p&gt;

&lt;p&gt;So, what is the difference between these two? Well NAME_VERSION_4 is a top level dependency, whereas NAME_VERSION_6 is a sub-dependency, it seems.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;actionview&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;activemodel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;debug_inspector&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;railties&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;webmock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;addressable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;crack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;no&quot;&gt;NAME&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;       &lt;span class=&quot;n&quot;&gt;hashdiff&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what does this actually do? Seems it resolves specifications from the lockfile. The “4 space” (NAME VERSION 4) seems to also load a current spec, which I don’t quite get. Seems we re-assign this class level variable a lot to avoid passing it around.&lt;/p&gt;

&lt;!--
```diagram
gantt
   title file: /gems/bundler-1.14.6/lib/bundler/lockfile_parser.rb method: parse_spec
   dateFormat  s.SSS

   &quot;if line =~ NAME_VERSION_4 (run 854 times)&quot; :a1, 0.000, 0.004
   &quot;name = $1 (run 374 times)&quot; :a1, 0.004, 0.005
   &quot;version = $2 (run 374 times)&quot; :a1, 0.005, 0.006
   &quot;platform = $3 (run 374 times)&quot; :a1, 0.006, 0.007
   &quot;version = Gem::Version.new(version) (run 374 times)&quot; :a1, 0.007, 0.009
   &quot;platform = platform ? Gem::Platform.new(platform) : Gem::Platform::RUBY (run 374 times)&quot; :a1, 0.009, 0.010
   &quot;@current_spec = LazySpecification.new(name  version  platform) (run 374 times)&quot; :a1, 0.010, 0.013
   &quot;@current_spec.source = @current_source (run 374 times)&quot; :a1, 0.013, 0.014
   &quot;elsif line =~ NAME_VERSION_6 (run 480 times)&quot; :a1, 0.014, 0.016
   &quot;name = $1 (run 480 times)&quot; :a1, 0.016, 0.018
   &quot;version = $2 (run 480 times)&quot; :a1, 0.018, 0.019
   &quot;version = version.split(' ').map(&amp;:strip) if version (run 480 times)&quot; :a1, 0.019, 0.021
   &quot;dep = Gem::Dependency.new(name  version) (run 480 times)&quot; :a1, 0.021, 0.035
   &quot;@specs[@current_spec.identifier] ||= @current_spec&quot; :a1, 0.035, 0.036
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/Screen Shot 2017-03-28 at 6.33.13 PM.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;dep = GemDependency.new(name  version) (run 480 times)&quot; :a1, 0.021, 0.035&lt;/code&gt; takes a chunk of time (14ms with gantt generation, 6ms in reality), otherwise there’s not much bulk here.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So, in the end the reason this file is slower is that it is iterating over many sources and creating &lt;code class=&quot;highlighter-rouge&quot;&gt;Gem::Dependency&lt;/code&gt; objects. There is likely something we could do to make &lt;code class=&quot;highlighter-rouge&quot;&gt;LockFileParser&lt;/code&gt; faster, but the work likely won’t be worth the time spent.&lt;/p&gt;

&lt;p&gt;There isn’t much we can do to make this file faster without caching using marshalling the data or something.&lt;/p&gt;</content><author><name>Julian Nadeau</name></author><category term="computers" /><category term="ruby" /><category term="bundler" /><summary type="html">Here, we see that parse_#{@state} is the bulk of the work. This is a dynamic call to parse methods… is any one of them slower than another? To solve this, I split out the dynamic line into a case statement to see which lines were being called. elseif @state + case @state.to_s + when 'source' + parse_source(line) + when 'dependency' + parse_dependency(line) + when 'spec' + parse_spec(line) + when 'platform' + parse_platform(line) + when 'bundled_with' + parse_bundled_with(line) + when 'ruby' + parse_ruby(line) + else + send(&quot;parse_#{@state}&quot;, line) + end - send(&quot;parse_#{@state}&quot;, line) end By the diagram below, we can see the following from our case statement: parse_state number time   parse_source 1131 times 32ms SOURCE did not include line, so it went to the case statement parse_platform 1 time 1 ms - parse_dependency 237 times 15 ms - parse_bundled_with 1 time 1 ms - parse_source parse_spec is the obvious bulk of this method, so let’s also look there. parse_spec The parse spec code looks like so: def parse_spec(line) if line =~ NAME_VERSION_4 name = $1 version = $2 platform = $3 version = Gem::Version.new(version) platform = platform ? Gem::Platform.new(platform) : Gem::Platform::RUBY @current_spec = LazySpecification.new(name, version, platform) @current_spec.source = @current_source # Avoid introducing multiple copies of the same spec (caused by # duplicate GIT sections) @specs[@current_spec.identifier] ||= @current_spec elsif line =~ NAME_VERSION_6 name = $1 version = $2 version = version.split(&quot;,&quot;).map(&amp;amp;:strip) if version dep = Gem::Dependency.new(name, version) @current_spec.dependencies &amp;lt;&amp;lt; dep end end It takes about 15-17ms to run all of it. I’d like to see how often each part is called. NAME_VERSION_4, called 374 times, took about 7ms NAME_VERSION_6, called 480 times, took about 8ms Which means they take equally as long, but the NAME_VERSION_4 option is slower taking about 0.000044s for each run as opposed to 0.000035s for each run. So, what is the difference between these two? Well NAME_VERSION_4 is a top level dependency, whereas NAME_VERSION_6 is a sub-dependency, it seems. NAME VERSION 4 web-console (3.4.0) NAME VERSION 6 actionview (&amp;gt;= 5.0) NAME VERSION 6 activemodel (&amp;gt;= 5.0) NAME VERSION 6 debug_inspector NAME VERSION 6 railties (&amp;gt;= 5.0) NAME VERSION 4 webmock (2.3.2) NAME VERSION 6 addressable (&amp;gt;= 2.3.6) NAME VERSION 6 crack (&amp;gt;= 0.3.2) NAME VERSION 6 hashdiff So what does this actually do? Seems it resolves specifications from the lockfile. The “4 space” (NAME VERSION 4) seems to also load a current spec, which I don’t quite get. Seems we re-assign this class level variable a lot to avoid passing it around. We can see that &quot;dep = GemDependency.new(name version) (run 480 times)&quot; :a1, 0.021, 0.035 takes a chunk of time (14ms with gantt generation, 6ms in reality), otherwise there’s not much bulk here. So, in the end the reason this file is slower is that it is iterating over many sources and creating Gem::Dependency objects. There is likely something we could do to make LockFileParser faster, but the work likely won’t be worth the time spent. There isn’t much we can do to make this file faster without caching using marshalling the data or something.</summary></entry><entry><title type="html">bundler/definition.rb</title><link href="http://localhost:4000/computers/ruby/bundler/2017/03/27/definition/" rel="alternate" type="text/html" title="bundler/definition.rb" /><published>2017-03-27T16:50:50-04:00</published><updated>2017-03-27T16:50:50-04:00</updated><id>http://localhost:4000/computers/ruby/bundler/2017/03/27/definition</id><content type="html" xml:base="http://localhost:4000/computers/ruby/bundler/2017/03/27/definition/">&lt;!---
```diagram
graph TD
   Bundler#definition[Bundler#definition 226ms]--120ms-\-&gt;Definition.build
   Definition.build--118ms-\-&gt;Dsl#evaluate
   Dsl#evaluate--33ms-\-&gt;builder.eval_gemfile
   Dsl#evaluate--85ms-\-&gt;Definition#new[builder.to_definition -&gt; Definition#new]
   Definition#new--33ms-\-&gt;LockfileParser.new
   Definition#new--35ms-\-&gt;definition#converge_dependencies
   definition#converge_dependencies--113K calls, 30ms-\-&gt;locked_deps.select
   LockfileParser.new--1370 calls, 26ms-\-&gt;lockfile_parser#parse_state
   lockfile_parser#parse_state--1131 times, 22ms-\-&gt;lockfile_parser#parse_source
   lockfile_parser#parse_state--1 times, &lt;1ms-\-&gt;lockfile_parser#parse_platform
   lockfile_parser#parse_state--237 times, 5ms-\-&gt;lockfile_parser#parse_dependency
   lockfile_parser#parse_state--1 times, &lt;1ms-\-&gt;lockfile_parser#parse_bundled_with
   lockfile_parser#parse_source--854 calls, about 15ms-\-&gt;lockfile_parser#parse_spec
   lockfile_parser#parse_spec--374 calls, 7.5ms-\-&gt;NAME_VERSION_4
   lockfile_parser#parse_spec--480 calls, 7.5ms-\-&gt;NAME_VERSION_6
   NAME_VERSION_4--6ms-\-&gt;current_spec.source
   NAME_VERSION_6--2ms-\-&gt;Gem::Dependency.new(name, version)
   NAME_VERSION_6--6ms-\-&gt;specs=current_spec
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/a24ee98f37dd33b571a4efa535c1aa68.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;bundlerdefinition&quot;&gt;Bundler#definition&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: gems/bundler-1.14.5/lib/bundler.rb method: definition
   dateFormat  s.SSS

   @definition = nil if unlock :a1, 0.000, 0.001
   end :a1, 0.001, 0.002
   configure :a1, 0.002, 0.016
   Definition.build(default_gemfile, default_lockfile, unlock) :a1, 0.016, 0.226
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/23b676377c99e839cbedb08ef02c2580.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As we can see, &lt;code class=&quot;highlighter-rouge&quot;&gt;Definition.build&lt;/code&gt; take a long time to process.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;definitionbuild&quot;&gt;Definition.build&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title lib/bundler/definition.rb#build
   dateFormat  s.SSS

   unlock ||= {} :a1, 0.000, 0.001
   gemfile = Pathname.new(gemfile).expand_path :a1, 0.001, 0.002
   raise GemfileNotFound :a1, 0.002, 0.003
   Dsl.evaluate(gemfile, lockfile, unlock) :a1, 0.003, 0.214
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/8e82477f959f767a7fd4cf8c58b1f5fb.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here we can see &lt;code class=&quot;highlighter-rouge&quot;&gt;Dsl.evaluate&lt;/code&gt; takes the most time&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;dslevaluate&quot;&gt;Dsl.evaluate&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title lib/bundler/dsl.rb#evaluate
   dateFormat  s.SSS

   builder = new :a1, 0.000, 0.001
   builder.eval_gemfile(gemfile) :a1, 0.001, 0.056
   builder.to_definition(lockfile, unlock) :a1, 0.056, 0.185
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/9a323efe751f19d3f0e6b0a4664dcc77.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that the time is split between &lt;code class=&quot;highlighter-rouge&quot;&gt;eval_gemfile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;to_definition&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;buildereval_gemfile&quot;&gt;builder.eval_gemfile&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title lib/bundler/dsl.rb#eval_gemfile
   dateFormat  s.SSS

   begin :a1, 0.000, 0.001
   expanded_gemfile_path = ... :a1, 0.001, 0.002
   original_gemfile = @gemfile :a1, 0.002, 0.003
   @gemfile = expanded_gemfile_path :a1, 0.003, 0.004
   contents ||= Bundler.read_file(gemfile.to_s) :a1, 0.004, 0.005
   instance_eval :a1, 0.005, 0.058
   @gemfile = original_gemfile :a1, 0.058, 0.059
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/8442a36a5b4f4f43b6a2bddecca3dca7.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see here that when we take the contents of the bundler file, and &lt;code class=&quot;highlighter-rouge&quot;&gt;instance_eval&lt;/code&gt; it, we’ll spend about 55ms doing that.&lt;/p&gt;

&lt;p&gt;Digging into the &lt;code class=&quot;highlighter-rouge&quot;&gt;instance_eval&lt;/code&gt; a little more using &lt;code class=&quot;highlighter-rouge&quot;&gt;TracePoint&lt;/code&gt;, we can see that there are hundreds of mini-methods called starting with &lt;code class=&quot;highlighter-rouge&quot;&gt;dsl#source&lt;/code&gt;. We get this approximate trace:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;161&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;336&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:normalize_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;435&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:normalize_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;449&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:check_primary_source_safety&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;90&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SourceList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rubygems_primary_remotes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SourceList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:add_rubygems_remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;210&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rubygems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:add_remote&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SourceList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:warn_on_git_protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;245&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Class:Bundler&amp;gt;, :settings, :call]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;224&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:key_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;325&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Class:Gem::Requirement&amp;gt;, :create, :call]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Requirement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;121&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:gem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;347&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:normalize_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;336&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:normalize_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;343&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:valid_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;418&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:validate_keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;209&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;336&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:normalize_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SourceList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:add_git_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SourceList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:add_source_to_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;49&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Git&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repeat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;particularly&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;115&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SourceList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:warn_on_git_protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;245&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#&amp;lt;Class:Bundler&amp;gt;, :settings, :call]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;224&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:key_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;325&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with_source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;79&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Gem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without optimizing dozens of places, this is likely a dead end. We can look at caching, but it is uncacheable. Due to extensive use of procs and default values in hashes, we cannot cache the class object.&lt;/p&gt;

&lt;p&gt;This is a dead end.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;builderto_definition&quot;&gt;builder.to_definition&lt;/h2&gt;

&lt;p&gt;This method simply calls &lt;code class=&quot;highlighter-rouge&quot;&gt;Definition.new&lt;/code&gt;, so we’ll move to that instead.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;definitionnew&quot;&gt;Definition.new&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title lib/bundler/definition.rb#initialize
   dateFormat  s.SSS

   @unlocking = unlock == true || !unlock.empty? :a1, 0.000, 0.001
   @dependencies    = dependencies :a1, 0.001, 0.002
   @sources         = sources :a1, 0.002, 0.003
   @unlock          = unlock :a1, 0.003, 0.004
   @optional_groups = optional_groups :a1, 0.004, 0.005
   @remote          = false :a1, 0.005, 0.006
   @specs           = nil :a1, 0.006, 0.007
   @ruby_version    = ruby_version :a1, 0.007, 0.008
   @lockfile               = lockfile :a1, 0.008, 0.009
   @lockfile_contents      = String.new :a1, 0.009, 0.010
   @locked_bundler_version = nil :a1, 0.010, 0.011
   @locked_ruby_version    = nil :a1, 0.011, 0.012
   if lockfile &amp;&amp; File.exist?(lockfile) :a1, 0.012, 0.013
   @lockfile_contents = Bundler.read_file(lockfile) :a1, 0.013, 0.014
   @locked_gems = LockfileParser.new(@lockfile_contents) :a1, 0.014, 0.062
   @locked_platforms = @locked_gems.platforms :a1, 0.062, 0.063
   @platforms = @locked_platforms.dup :a1, 0.063, 0.064
   @locked_bundler_version = @locked_gems.bundler_version :a1, 0.064, 0.065
   @locked_ruby_version = @locked_gems.ruby_version :a1, 0.065, 0.066
   if unlock != true :a1, 0.066, 0.067
   @locked_deps    = @locked_gems.dependencies :a1, 0.067, 0.068
   @locked_specs   = SpecSet.new(@locked_gems.specs) :a1, 0.068, 0.070
   @locked_sources = @locked_gems.sources :a1, 0.070, 0.071
   @unlock[:gems] ||= [] :a1, 0.071, 0.072
   @unlock[:sources] ||= [] :a1, 0.072, 0.073
   @unlock[:ruby] ||= if @ruby_version &amp;&amp; locked_ruby_version_object :a1, 0.073, 0.074
   @unlocking ||= @unlock[:ruby] ||= (!@locked_ruby_version ^ !@ruby_version) :a1, 0.074, 0.075
   add_current_platform unless Bundler.settings[:frozen] :a1, 0.075, 0.076
   converge_path_sources_to_gemspec_sources :a1, 0.076, 0.094
   @path_changes = converge_paths :a1, 0.094, 0.095
   @source_changes = converge_sources :a1, 0.095, 0.109
   unless @unlock[:lock_shared_dependencies] :a1, 0.109, 0.110
   eager_unlock = expand_dependencies(@unlock[:gems]) :a1, 0.110, 0.111
   @unlock[:gems] = @locked_specs.for(eager_unlock).map(&amp;:name) :a1, 0.111, 0.112
   @gem_version_promoter = create_gem_version_promoter :a1, 0.112, 0.113
   @dependency_changes = converge_dependencies :a1, 0.113, 0.181
   @local_changes = converge_locals :a1, 0.181, 0.182
   @requires = compute_requires :a1, 0.182, 0.183
   fixup_dependency_types! :a1, 0.183, 0.194
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/b09f829c9ab8241be0bf624e1fccb56e.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Taking some of the more “expensive” lines, we can dig a bit deeper to get more accurate numbers.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;line&lt;/th&gt;
      &lt;th&gt;num_calls&lt;/th&gt;
      &lt;th&gt;time (s)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;@locked_gems = LockfileParser.new(@lockfile_contents), :a1, ,&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.03465300000971183&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@locked_specs   = SpecSet.new(@locked_gems.specs), :a1, ,&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.002618999977130443&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;converge_path_sources_to_gemspec_sources, :a1, ,&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.006308999989414588&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@source_changes = converge_sources, :a1, ,&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.010037000000011176&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;@dependency_changes = converge_dependencies, :a1, ,&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.022082999988924712&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;fixup_dependency_types!, :a1, ,&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0.0025529999984428287&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;lockfileparsernew&quot;&gt;LockfileParser.new&lt;/h2&gt;

&lt;p&gt;See &lt;a href=&quot;../lockfile_parser&quot;&gt;lockfile_parser&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;definitioncoverge_dependencies&quot;&gt;definition#coverge_dependencies&lt;/h2&gt;

&lt;!---
```diagram
gantt
   title file: /gems/bundler-1.14.6/lib/bundler/definition.rb method: converge_dependencies
   dateFormat  s.SSS

   &quot;(@dependencies + @locked_deps.values).each do |dep|&quot; :a1, 0.000, 0.001
   &quot;locked_source = @locked_deps[dep.name] (run 474 times)&quot; :a1, 0.001, 0.002
   &quot;if Bundler.settings[:frozen] &amp;&amp; !locked_source.nil? &amp;&amp; (run 474 times)&quot; :a1, 0.002, 0.005
   &quot;elsif dep.source (run 474 times)&quot; :a1, 0.005, 0.006
   &quot;dep.source = sources.get(dep.source) (run 142 times)&quot; :a1, 0.006, 0.009
   &quot;if dep.source.is_a?(Source::Gemspec) (run 474 times)&quot; :a1, 0.009, 0.010
   &quot;dependency_without_type = proc {|d| Gem::Dependency.new(d.name  *d.requirement.as_list) } (run 475 times)&quot; :a1, 0.010, 0.026
   &quot;Set.new(@dependencies.map(&amp;dependency_without_type)) != Set.new(@locked_deps.values.map(&amp;dependency_without_type))&quot; :a1, 0.026, 0.027
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/9fa239921639c7fb855711c800cd6576.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is very obvious to see that this particular line &lt;code class=&quot;highlighter-rouge&quot;&gt;locked_source = @locked_deps.select {|d| d.name == dep.name }.last (run 112812 times) :a1, 0.001, 0.182&lt;/code&gt; is the root cause of the slowness.
Run 112-113K times for the Shopify application, it is slow and could likely benefit from some up front hashing.&lt;/p&gt;

&lt;p&gt;This particular line was fixed by &lt;a href=&quot;https://github.com/bundler/bundler/pull/5539&quot;&gt;this pull request&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After fixing the issue surrounding select, my attention turned to &lt;code class=&quot;highlighter-rouge&quot;&gt;dependency_without_type = proc {|d| Gem::Dependency.new(d.name *d.requirement.as_list) }&lt;/code&gt;, which is run 475 times and takes 16ms. &lt;a href=&quot;https://github.com/bundler/bundler/pull/5354&quot;&gt;This pull request&lt;/a&gt; provides me with the context to know that we want to compare name and requirement, but not necessarily anything else.&lt;/p&gt;

&lt;p&gt;Let’s look at the documentation for &lt;code class=&quot;highlighter-rouge&quot;&gt;Gem::Dependency&lt;/code&gt; to understand how equality works so we don’t regress. The entry for comparison shows the following:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Uses this dependency as a pattern to compare to other. This dependency will match if the name matches the other’s name, and other has only an equal version requirement that satisfies this dependency.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As we can see, we simply need to match the name and version requirement to match. This means we don’t necessarily need the &lt;code class=&quot;highlighter-rouge&quot;&gt;Gem::Dependency&lt;/code&gt; as we simply use it for equality. That said &lt;code class=&quot;highlighter-rouge&quot;&gt;equal version requirement&lt;/code&gt; isn’t a particularly easy thing to do.
Requirements such as &lt;code class=&quot;highlighter-rouge&quot;&gt;1.0.1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; 1.0.0&lt;/code&gt; are ok, but are not easily compared. This means we can’t do something more naive like compare 2 arrays. Let’s look at what the comparison is actually doing.&lt;/p&gt;

&lt;p&gt;The comparison is making sure all dependencies match. We could likely do that with individual comparisons, but we’d want to avoid comparing everything if needed (aka bail with false on the first mis-match).
The following block will make sure we have a corresponding entry in &lt;code class=&quot;highlighter-rouge&quot;&gt;@locked_deps&lt;/code&gt; for all dependencies and that they match.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;vi&quot;&gt;@dependencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;any?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;locked_dep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@locked_deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked_dep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;dependency&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locked_dep&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This results in the following timings:&lt;/p&gt;

&lt;!---
```diagram
gantt
   title file: /gems/bundler-1.14.6/lib/bundler/definition.rb method: converge_dependencies
   dateFormat  s.SSS

   &quot;(@dependencies + @locked_deps.values).each do |dep|&quot; :a1, 0.000, 0.001
   &quot;locked_source = @locked_deps[dep.name] (run 474 times)&quot; :a1, 0.001, 0.002
   &quot;if Bundler.settings[frozen] &amp;&amp; !locked_source.nil? &amp;&amp; (run 474 times)&quot; :a1, 0.002, 0.005
   &quot;elsif dep.source (run 474 times)&quot; :a1, 0.005, 0.006
   &quot;dep.source = sources.get(dep.source) (run 142 times)&quot; :a1, 0.006, 0.009
   &quot;if dep.source.is_a?(SourceGemspec) (run 474 times)&quot; :a1, 0.009, 0.010
   &quot;@dependencies.any? do |dependency|&quot; :a1, 0.010, 0.011
   &quot;locked_dep = @locked_deps[dependency.name] (run 9 times)&quot; :a1, 0.011, 0.012
   &quot;next true if locked_dep.nil? (run 9 times)&quot; :a1, 0.012, 0.013
   &quot;dependency === locked_dep (run 9 times)&quot; :a1, 0.013, 0.014
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/cf900e705f924982efd13e032a7167fa.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, we’ve saved about half of the method time.&lt;/p&gt;

&lt;p&gt;Running the test added to the &lt;a href=&quot;https://github.com/bundler/bundler/pull/5354&quot;&gt;pull request&lt;/a&gt; used for context results in a success!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;actions&quot;&gt;Actions&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Convert @locked_deps to hash, see if that improves things with &lt;code class=&quot;highlighter-rouge&quot;&gt;O(1)&lt;/code&gt; access instead. Fixed in &lt;a href=&quot;https://github.com/bundler/bundler/pull/5539&quot;&gt;this pull request&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Avoid using &lt;code class=&quot;highlighter-rouge&quot;&gt;Gem::Dependency&lt;/code&gt; just for comparison in &lt;code class=&quot;highlighter-rouge&quot;&gt;converge_dependencies&lt;/code&gt;. Fixed in &lt;a href=&quot;https://github.com/bundler/bundler/pull/5546&quot;&gt;this pull request&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Can &lt;code class=&quot;highlighter-rouge&quot;&gt;parse_source&lt;/code&gt; in the lockfile parse be faster? &lt;em&gt;Not really, this was a dead end&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Look at caching the evaled gemfile. Not easily possible. There are tons of side effects of the eval which change class level variables. It would require a large refactor for minimal benefit.&lt;/li&gt;
  &lt;li&gt;Cache the class instance instead? Uncacheable. Due to extensive use of procs and default values in hashes, we cannot cache the class object.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Julian Nadeau</name></author><category term="computers" /><category term="ruby" /><category term="bundler" /><summary type="html">Bundler#definition As we can see, Definition.build take a long time to process. Definition.build From here we can see Dsl.evaluate takes the most time Dsl.evaluate We can see that the time is split between eval_gemfile and to_definition. builder.eval_gemfile We can see here that when we take the contents of the bundler file, and instance_eval it, we’ll spend about 55ms doing that. Digging into the instance_eval a little more using TracePoint, we can see that there are hundreds of mini-methods called starting with dsl#source. We get this approximate trace: [161, Bundler::Dsl, :source, :call] [336, Bundler::Dsl, :normalize_hash, :call] [435, Bundler::Dsl, :normalize_source, :call] [449, Bundler::Dsl, :check_primary_source_safety, :call] [90, Bundler::SourceList, :rubygems_primary_remotes, :call] [38, Bundler::SourceList, :add_rubygems_remote, :call] [210, Bundler::Source::Rubygems, :add_remote, :call] ... [115, Bundler::SourceList, :warn_on_git_protocol, :call] [245, #&amp;lt;Class:Bundler&amp;gt;, :settings, :call] [54, Bundler::Settings, :[], :call] [224, Bundler::Settings, :key_for, :call] [325, Bundler::Dsl, :with_source, :call] [79, Bundler::Dependency, :initialize, :call] [38, Gem::Dependency, :initialize, :call] ... [54, #&amp;lt;Class:Gem::Requirement&amp;gt;, :create, :call] [123, Gem::Requirement, :initialize, :call] [121, Bundler::Dsl, :gem, :call] [347, Bundler::Dsl, :normalize_options, :call] [336, Bundler::Dsl, :normalize_hash, :call] [343, Bundler::Dsl, :valid_keys, :call] [418, Bundler::Dsl, :validate_keys, :call] [209, Bundler::Dsl, :git, :call] [336, Bundler::Dsl, :normalize_hash, :call] [24, Bundler::SourceList, :add_git_source, :call] [13, Bundler::Source::Git, :initialize, :call] [96, Bundler::SourceList, :add_source_to_list, :call] [49, Bundler::Source::Git, :hash, :call] [79, Bundler::Source::Git, :name, :call] [49, Bundler::Source::Git, :hash, :call] [79, Bundler::Source::Git, :name, :call] ... repeat the last block a lot, particularly Bundler::Source::Git calls ... [115, Bundler::SourceList, :warn_on_git_protocol, :call] [245, #&amp;lt;Class:Bundler&amp;gt;, :settings, :call] [54, Bundler::Settings, :[], :call] [224, Bundler::Settings, :key_for, :call] [325, Bundler::Dsl, :with_source, :call] [79, Bundler::Dependency, :initialize, :call] [38, Gem::Dependency, :initialize, :call] Without optimizing dozens of places, this is likely a dead end. We can look at caching, but it is uncacheable. Due to extensive use of procs and default values in hashes, we cannot cache the class object. This is a dead end. builder.to_definition This method simply calls Definition.new, so we’ll move to that instead. Definition.new Taking some of the more “expensive” lines, we can dig a bit deeper to get more accurate numbers. line num_calls time (s) @locked_gems = LockfileParser.new(@lockfile_contents), :a1, , 1 0.03465300000971183 @locked_specs = SpecSet.new(@locked_gems.specs), :a1, , 1 0.002618999977130443 converge_path_sources_to_gemspec_sources, :a1, , 1 0.006308999989414588 @source_changes = converge_sources, :a1, , 1 0.010037000000011176 @dependency_changes = converge_dependencies, :a1, , 1 0.022082999988924712 fixup_dependency_types!, :a1, , 1 0.0025529999984428287 LockfileParser.new See lockfile_parser definition#coverge_dependencies It is very obvious to see that this particular line locked_source = @locked_deps.select {|d| d.name == dep.name }.last (run 112812 times) :a1, 0.001, 0.182 is the root cause of the slowness. Run 112-113K times for the Shopify application, it is slow and could likely benefit from some up front hashing. This particular line was fixed by this pull request. After fixing the issue surrounding select, my attention turned to dependency_without_type = proc {|d| Gem::Dependency.new(d.name *d.requirement.as_list) }, which is run 475 times and takes 16ms. This pull request provides me with the context to know that we want to compare name and requirement, but not necessarily anything else. Let’s look at the documentation for Gem::Dependency to understand how equality works so we don’t regress. The entry for comparison shows the following: Uses this dependency as a pattern to compare to other. This dependency will match if the name matches the other’s name, and other has only an equal version requirement that satisfies this dependency. As we can see, we simply need to match the name and version requirement to match. This means we don’t necessarily need the Gem::Dependency as we simply use it for equality. That said equal version requirement isn’t a particularly easy thing to do. Requirements such as 1.0.1 and &amp;gt; 1.0.0 are ok, but are not easily compared. This means we can’t do something more naive like compare 2 arrays. Let’s look at what the comparison is actually doing. The comparison is making sure all dependencies match. We could likely do that with individual comparisons, but we’d want to avoid comparing everything if needed (aka bail with false on the first mis-match). The following block will make sure we have a corresponding entry in @locked_deps for all dependencies and that they match. @dependencies.any? do |dependency| locked_dep = @locked_deps[dependency.name] next true if locked_dep.nil? dependency === locked_dep end This results in the following timings: As you can see, we’ve saved about half of the method time. Running the test added to the pull request used for context results in a success! Actions Convert @locked_deps to hash, see if that improves things with O(1) access instead. Fixed in this pull request Avoid using Gem::Dependency just for comparison in converge_dependencies. Fixed in this pull request Can parse_source in the lockfile parse be faster? Not really, this was a dead end Look at caching the evaled gemfile. Not easily possible. There are tons of side effects of the eval which change class level variables. It would require a large refactor for minimal benefit. Cache the class instance instead? Uncacheable. Due to extensive use of procs and default values in hashes, we cannot cache the class object.</summary></entry><entry><title type="html">Auto-generating Gantt charts for a method</title><link href="http://localhost:4000/computers/ruby/2017/03/23/auto_generated_gantt_charts/" rel="alternate" type="text/html" title="Auto-generating Gantt charts for a method" /><published>2017-03-23T00:36:50-04:00</published><updated>2017-03-23T00:36:50-04:00</updated><id>http://localhost:4000/computers/ruby/2017/03/23/auto_generated_gantt_charts</id><content type="html" xml:base="http://localhost:4000/computers/ruby/2017/03/23/auto_generated_gantt_charts/">&lt;p&gt;While working on timing the performance of Bundler, I noticed that Gantt charts are an effective way to visualize slowness. Working off of this theory, I automated the generation of the charts using &lt;a href=&quot;http://knsv.github.io/mermaid/index.html&quot;&gt;Mermaid&lt;/a&gt;. The resulting chart data can be plugged into &lt;a href=&quot;http://knsv.github.io/mermaid/live_editor/&quot;&gt;this online editor&lt;/a&gt;, or you can generate it using the Mermaid library yourself.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;# We use a global aggregate cache to allow us to track methods within a loop all at once&lt;/span&gt;
&lt;span class=&quot;vg&quot;&gt;$timed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;at_exit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;vg&quot;&gt;$timed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timed_hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Output mermaid syntax for gantt&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;title_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timed_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'GEM_HOME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'HOME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gantt&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;   title file: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title_file&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; method: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;   dateFormat  s.SSS&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;curr_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.000&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Aggregate the lines together. Loops can cause things to become unweildly otherwise&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@grouped_lines&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timed_hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;group_by&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:line_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;vi&quot;&gt;@grouped_lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_line_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# If we have run more than once, we should indicate how many times something is called&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;entry_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; (run &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; times)&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group_name&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;entry_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entry_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&quot;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;'&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;,&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Mermaid has trouble with these&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Total time for all entries to run&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;total_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;inject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_time&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# Output the line&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;post_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr_time&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;   &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entry_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; :a1, %.3f, %.3f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curr_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;curr_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post_time&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;gantt_chart&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Determine the method and path that we're calling from&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;call_loc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;caller_locations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'byebug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;label&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call_loc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;readlines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$timed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tracing &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; for method &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$timed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;path: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;entries: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# This block will be used to finalize the time it to run, gather the line source, etc.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;finalize_time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;$timed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Finalize the time&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CLOCK_MONOTONIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Get the source line from the line number&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:line_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;
      &lt;span class=&quot;vg&quot;&gt;$timed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;line_no: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:line_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;line: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;time: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# We use Ruby's tracepoint on a per line basis&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# We only care about lines called within our method and within our path&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;TracePoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;method_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# We could have a call from last time, finalize it, we've moved to a new line&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;finalize_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Initialize a new entry with the line number and a start time&lt;/span&gt;
    &lt;span class=&quot;vg&quot;&gt;$timed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;line_no: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;lineno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;start: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CLOCK_MONOTONIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;enable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;finalize_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# The last call needs to be finalized, finalize it here&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and this chart:&lt;/p&gt;

&lt;!---
```diagram
gantt
   title file: /Users/juliannadeau/.gem/ruby/2.3.3/gems/bundler-1.14.5/lib/bundler.rb method: setup
   dateFormat   s.SSS

   return @setup if defined?(@setup) &amp;&amp; @setup :a1, 0.000, 0.001
   definition.validate_runtime! :a1, 0.001, 0.229
   SharedHelpers.print_major_deprecations! :a1, 0.229, 0.230
   if groups.empty? :a1, 0.230, 0.231
   @setup = load.setup :a1, 0.231, 1.312
```
---&gt;
&lt;p&gt;&lt;img src=&quot;https://jules2689.github.io/gitcdn/images/website/images/diagram/bundler_setup.png&quot; alt=&quot;diagram image&quot; width=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can now dig deeper into the lines &lt;code class=&quot;highlighter-rouge&quot;&gt;definition.validate_runtime!&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@setup = load.setup&lt;/code&gt; as they take the most time.&lt;/p&gt;</content><author><name>Julian Nadeau</name></author><category term="computers" /><category term="ruby" /><summary type="html">While working on timing the performance of Bundler, I noticed that Gantt charts are an effective way to visualize slowness. Working off of this theory, I automated the generation of the charts using Mermaid. The resulting chart data can be plugged into this online editor, or you can generate it using the Mermaid library yourself. # We use a global aggregate cache to allow us to track methods within a loop all at once $timed = {} at_exit do $timed.each do |method_name, timed_hash| # Output mermaid syntax for gantt title_file = timed_hash[:path].gsub(ENV['GEM_HOME'], '').gsub(ENV['HOME'], '') puts &quot;gantt&quot; puts &quot; title file: #{title_file} method: #{method_name}&quot; puts &quot; dateFormat s.SSS\n\n&quot; curr_time = 0.000 # Aggregate the lines together. Loops can cause things to become unweildly otherwise @grouped_lines = timed_hash[:entries].group_by { |line| [line[:line], line[:line_no]] } @grouped_lines.each do |(group_name, _line_no), group| # If we have run more than once, we should indicate how many times something is called entry_name = group.size &amp;gt; 1 ? &quot;#{group_name} (run #{group.size} times)&quot; : group_name entry_name = entry_name.tr('&quot;', &quot;'&quot;).tr(&quot;,&quot;, ' ') # Mermaid has trouble with these # Total time for all entries to run total_time = group.collect { |e| e[:time] }.inject(:+) time = total_time &amp;lt; 0.001 ? 0.001 : total_time # Output the line post_time = time + curr_time puts format(&quot; \&quot;#{entry_name}\&quot; :a1, %.3f, %.3f&quot;, curr_time, post_time) curr_time = post_time end puts &quot;\n\n&quot; end end def gantt_chart ret = nil # Determine the method and path that we're calling from call_loc = caller_locations.reject { |l| l.path.include?('byebug') }.first method_name = call_loc.label path = call_loc.path source = File.readlines(path) unless $timed[method_name] puts &quot;Tracing #{path} for method #{method_name}&quot; $timed[method_name] = { path: path, entries: [] } end # This block will be used to finalize the time it to run, gather the line source, etc. finalize_time = -&amp;gt; () do if last = $timed[method_name][:entries].pop # Finalize the time time = Process.clock_gettime(Process::CLOCK_MONOTONIC) - last[:start] # Get the source line from the line number line = source[last[:line_no] - 1].strip $timed[method_name][:entries] &amp;lt;&amp;lt; { line_no: last[:line_no], line: line, time: time } end end # We use Ruby's tracepoint on a per line basis # We only care about lines called within our method and within our path TracePoint.new(:line) do |tp| next unless tp.path == path next unless tp.method_id.to_s == method_name.to_s # We could have a call from last time, finalize it, we've moved to a new line finalize_time.call # Initialize a new entry with the line number and a start time $timed[method_name][:entries] &amp;lt;&amp;lt; { line_no: tp.lineno, start: Process.clock_gettime(Process::CLOCK_MONOTONIC) } end.enable do ret = yield finalize_time.call # The last call needs to be finalized, finalize it here end ret end and this chart: We can now dig deeper into the lines definition.validate_runtime! and @setup = load.setup as they take the most time.</summary></entry></feed>